// Generated by CoffeeScript 1.12.5
(function() {
  var Driver, Errorlet, EventEmitter, NoPool, Pool, Promise, _, debug,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Driver = require('./driver');

  EventEmitter = require('events').EventEmitter;

  _ = require('lodash');

  debug = require('debug')('easydbi');

  Promise = require('bluebird');

  Errorlet = require('errorlet');

  _.contains = _.includes;

  NoPool = (function() {
    function NoPool(key, type, driver, connOptions, options1) {
      var noPoolDriver, self;
      this.key = key;
      this.type = type;
      this.connOptions = connOptions;
      this.options = options1;
      self = this;
      debug('Easydbi.NoPool.ctor', this.key, this.type, this.connOptions, this.options);
      this.driver = noPoolDriver = (function(superClass) {
        extend(noPoolDriver, superClass);

        function noPoolDriver() {
          return noPoolDriver.__super__.constructor.apply(this, arguments);
        }

        noPoolDriver.id = 0;

        return noPoolDriver;

      })(driver);
    }

    NoPool.prototype.connect = function(cb) {
      var conn;
      debug('Easydbi.NoPool.connect', this.key, this.connOptions);
      conn = new this.driver(this.key, this.connOptions);
      return conn.connect(cb);
    };

    NoPool.prototype.prepare = function(call, options) {
      var proc;
      proc = (options instanceof Function) || typeof options === 'function' ? options : (options != null ? options.query : void 0) ? function(args, cb) {
        return this.query(options.query, args, cb);
      } : (options != null ? options.exec : void 0) ? function(args, cb) {
        return this.exec(options.exec, args, cb);
      } : Errorlet.raise({
        error: 'EASYDBI.prepare:invalid_prepare_option',
        call: call,
        options: options
      });
      this.driver.prototype[call] = proc;
      return Promise.promisifyAll(this.driver.prototype);
    };

    return NoPool;

  })();

  NoPool.prototype.connectAsync = Promise.promisify(NoPool.prototype.connect);

  Pool = (function(superClass) {
    extend(Pool, superClass);

    Pool.NoPool = NoPool;

    Pool.defaultOptions = {
      min: 0,
      max: 20
    };

    function Pool(key, type, driver, connOptions, options1) {
      var poolDriver, self;
      this.key = key;
      this.type = type;
      this.connOptions = connOptions;
      this.options = options1;
      this.options = _.extend({}, this.constructor.defaultOptions, this.options || {});
      self = this;
      debug('Easydbi.Pool.ctor', this.key, this.type);
      this.driver = poolDriver = (function(superClass1) {
        extend(poolDriver, superClass1);

        function poolDriver() {
          return poolDriver.__super__.constructor.apply(this, arguments);
        }

        poolDriver.id = 0;

        poolDriver.prototype.disconnect = function(cb) {
          var e;
          try {
            self.makeAvailable(this);
            return cb();
          } catch (error) {
            e = error;
            return cb(e);
          }
        };

        return poolDriver;

      })(driver);
      this.total = [];
      this.avail = [];
    }

    Pool.prototype.connect = function(cb) {
      var connectMe, db;
      debug('Pool.connect', this.options, this.total.length, this.avail.length);
      connectMe = function(db) {
        if (db.isConnected()) {
          return cb(null, db);
        } else {
          return db.connect(cb);
        }
      };
      if (this.avail.length > 0) {
        db = this.avail.shift();
        return connectMe(db);
      } else {
        this.once('available', connectMe);
        if (this.total.length < this.options.max) {
          db = new this.driver(this.key, this.connOptions);
          this.total.push(db);
          return this.makeAvailable(db);
        }
      }
    };

    Pool.prototype.prepare = function(call, options) {
      var proc;
      proc = (options instanceof Function) || typeof options === 'function' ? options : (options != null ? options.query : void 0) ? function(args, cb) {
        return this.query(options.query, args, cb);
      } : (options != null ? options.exec : void 0) ? function(args, cb) {
        return this.exec(options.exec, args, cb);
      } : Errorlet.raise({
        error: 'EASYDBI.prepare:invalid_prepare_option',
        call: call,
        options: options
      });
      this.driver.prototype[call] = proc;
      return Promise.promisifyAll(this.driver.prototype);
    };

    Pool.prototype.makeAvailable = function(db) {
      if (!_.contains(this.avail, db)) {
        this.avail.push(db);
      }
      return this.emit('available', db);
    };

    return Pool;

  })(EventEmitter);

  Pool.prototype.connectAsync = Promise.promisify(Pool.prototype.connect);

  module.exports = Pool;

}).call(this);
