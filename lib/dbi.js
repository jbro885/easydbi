// Generated by CoffeeScript 1.10.0
(function() {
  var DBI, Driver, Errorlet, EventEmitter, Pool, Promise, Schema, debug;

  EventEmitter = require('events').EventEmitter;

  Driver = require('./driver');

  Pool = require('./pool');

  debug = require('debug')('easydbi');

  Promise = require('bluebird');

  Errorlet = require('errorlet');

  Schema = require('schemalet');

  DBI = (function() {
    function DBI() {}

    DBI.drivers = {};

    DBI.pools = {};

    DBI.register = function(type, driver) {
      this.drivers[type] = driver;
      return this;
    };

    DBI.getType = function(type) {
      if (this.drivers.hasOwnProperty(type)) {
        return this.drivers[type];
      } else {
        return Errorlet.raise({
          error: 'EASYDBI.unknown_dbi_driver_type',
          type: type
        });
      }
    };

    DBI.hasType = function(type) {
      return this.drivers.hasOwnProperty(type);
    };

    DBI.hasSetup = function(key) {
      return this.pools.hasOwnProperty(key);
    };

    DBI.setup = function(key, arg) {
      var driver, options, pool, type;
      type = arg.type, options = arg.options, pool = arg.pool;
      debug('DBI.setup', key, type, options, pool);
      if (this.pools.hasOwnProperty(key)) {
        Errorlet.raise({
          error: 'EASYDBI.setup:duplicate_setup',
          key: key,
          keys: Object.keys(this.pools)
        });
      }
      driver = this.getType(type);
      if (driver.pool && pool) {
        this.pools[key] = new driver.pool(key, type, driver, options, pool);
      } else if (pool) {
        this.pools[key] = new Pool(key, type, driver, options, pool);
      } else {
        this.pools[key] = new Pool.NoPool(key, type, driver, options, pool);
      }
      return this;
    };

    DBI.tearDown = function(key) {
      return delete this.pools[key];
    };

    DBI.getPool = function(key) {
      if (this.pools.hasOwnProperty(key)) {
        return this.pools[key];
      } else {
        return Errorlet.raise({
          error: 'EASYDBI.unknown_driver_spec',
          key: key
        });
      }
    };

    DBI.connect = Schema.makeFunction({
      async: true,
      params: [
        {
          type: 'string'
        }
      ],
      returns: Driver
    }, function(key, cb) {
      var e, error, pool;
      debug('DBI.connect', key);
      try {
        pool = this.getPool(key);
        return pool.connect(cb);
      } catch (error) {
        e = error;
        return cb(e);
      }
    });

    DBI.connectAsync = DBI.connect;

    DBI.load = function(key, module) {
      var call, options;
      for (call in module) {
        options = module[call];
        this.prepare(key, call, options);
      }
      return this;
    };

    DBI.prepare = function(key, call, options) {
      var pool;
      pool = this.getPool(key);
      pool.prepare(call, options);
      return this;
    };

    return DBI;

  })();

  module.exports = DBI;

}).call(this);
