// Generated by CoffeeScript 1.10.0
(function() {
  var Driver, Errorlet, EventEmitter, Promise, _, debug, fs, path,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events').EventEmitter;

  Promise = require('bluebird');

  fs = Promise.promisifyAll(require('fs'));

  path = require('path');

  Errorlet = require('errorlet');

  _ = require('lodash');

  debug = require('debug')('easydbi');

  Driver = (function(superClass) {
    extend(Driver, superClass);

    Driver.id = 0;

    Driver.pool = true;

    function Driver(key1, options) {
      this.key = key1;
      this.options = options;
      this.constructor.id++;
      this.id = this.constructor.id;
    }

    Driver.prototype.connect = function(cb) {};

    Driver.prototype.isConnected = function() {
      return false;
    };

    Driver.prototype.driverName = function() {
      return this.constructor.name;
    };

    Driver.prototype.loadScript = function(filePath, inTrans, cb) {
      var self;
      if (arguments.length === 2) {
        cb = inTrans;
        inTrans = false;
      }
      debug('DBI.Driver.loadScript', {
        filePath: filePath,
        inTrans: inTrans
      });
      self = this;
      return fs.readFileAsync(filePath, 'utf8').then(function(data) {
        var cmds;
        cmds = _.filter(data.split(/\s*;\s*/), function(cmd) {
          return cmd.trim() !== '';
        });
        if (inTrans) {
          return self.beginAsync().then(function() {
            return Promise.each(cmds, function(cmd) {
              return self.execAsync(cmd, {});
            });
          }).then(function() {
            return self.commitAsync();
          })["catch"](function(e) {
            return self.rollback(function() {
              return cb(e);
            });
          });
        } else {
          return Promise.each(cmds, function(cmd) {
            return self.execAsync(cmd, {});
          });
        }
      }).then(function() {
        return cb(null);
      })["catch"](cb);
    };

    Driver.prototype.query = function(key, args, cb) {};

    Driver.prototype.queryOne = function(key, args, cb) {
      if (arguments.length === 2) {
        cb = args;
        args = {};
      }
      return this.query(key, args, function(err, rows) {
        if (err) {
          cb(err);
        }
        if ((rows != null ? rows.length : void 0) === 0) {
          return cb(Errorlet.create({
            error: 'EASYDBI.queryOne:no_rows_found'
          }));
        } else if ((rows != null ? rows.length : void 0) > 0) {
          return cb(null, rows[0]);
        } else {
          return cb(Errorlet.create({
            error: 'EASYDBI.queryOne:unknown_result',
            result: rows
          }));
        }
      });
    };

    Driver.prototype.exec = function(key, args, cb) {
      if (arguments.length === 2) {
        cb = args;
        args = {};
      }
      return this.query(key, args, function(err, rows) {
        if (err) {
          return cb(err);
        } else {
          return cb(null);
        }
      });
    };

    Driver.prototype.begin = function(cb) {
      return this.exec('begin', cb);
    };

    Driver.prototype.commit = function(cb) {
      return this.exec('commit', cb);
    };

    Driver.prototype.rollback = function(cb) {
      return this.exec('rollback', cb);
    };

    Driver.prototype.disconnect = function(cb) {};

    Driver.prototype.close = function(cb) {};

    Driver.prototype.execScript = function(filePath, cb) {
      var self;
      self = this;
      return fs.readFileAsync(filePath, 'utf8').then(function(data) {
        var queries;
        queries = data.split(/\w*;\w/);
        return Promise.each(queries, function(query) {
          console.log('try', query);
          return self.execAsync(query, {});
        });
      }).then(function() {
        return cb(null);
      })["catch"](cb);
    };

    return Driver;

  })(EventEmitter);

  Promise.promisifyAll(Driver.prototype);

  module.exports = Driver;

}).call(this);
